# -*- coding: utf-8 -*-
"""UNICORN - TSDN - PY

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SkHiE2DBLNG8qbQuMH7Ht90pRnfXgZbi

#Install Package
"""

#import package
import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
import seaborn as sns 
from scipy import stats
from datetime import datetime
import itertools
import matplotlib
import statsmodels.api as sm
pd.set_option('display.float_format', lambda x: '%.2f' % x) # set 2 angka dibelakang koma (desimal)

"""#Exploratory Data Analysis

Keterangan: Tahapan Cleaning Data dan Data Preprocessing dilakukan langsung di Excel sebelum data digunakan.

#Data vaksin hipotesis

Variabel pada data vaksin hipotesis
- wilayah_kota: Kabupaten dan Kota di DKI Jakarta
- jumlah_vaksin: Total vaksin yang diberikan sampai 8 Oktober 2021 berdasarkan wilayah kota
- jumlah_titik_vaksin: Total titik vaksinasi berdasarkan wilayah kota
- jumlah_nakes: Total tenaga kesehatan berdasarkan wilayah kota 
- jumlah_rumah_sakit: Total Rumah Sakit berdasarkan wilayah kota 
- jumlah_puskesmas: Total Puskesmas berdasarkan wilayah kota
- jumlah_dosis: Total dosis vaksinasi (1 dan 2) yang diterima sampai 8 Oktober 2021

Sumber data: BPS 2020 - Jakarta Smart City
"""

# Import data vaksin hipotesis
url = "https://raw.githubusercontent.com/rasendriyam/datavaksin/main/vaksin_hipotesis.csv"
df_hip = pd.read_csv(url)
df_hip

df_hip.head()

df_hip.describe()

#CORRELATION MATRIX
# Melihat adanya hubungan antara jumlah orang yang sudah divaksin dengan beberapa faktor menggunakan "Correlation Matrix"
corr2 = df_hip.corr() 
plt.figure(figsize=(10, 6))
sns.heatmap(corr2[(corr2 >= 0.5) | (corr2 <= -0.5)], 
            cmap='viridis', vmax=1.0, vmin=-1.0, linewidths=0.1,
            annot=True, annot_kws={"size": 14}, square=True);

"""#Data vaksin golongan

Variabel pada data vaksin golongan
- date: Tanggal (3 Maret - 8 Okt 2021)
- golongan: Golongan penerima vaksin 
- target_vaksinasi: Sasaran vaksinasi yang telah ditentukan pergolongan 
- vaksinasi_1: Total kumulatif vaksin dosis 1 diberikan perhari
- vaksinasi_2: Total kumulatif vaksin dosis 2 diberikan perhari
- persentasi_vaksinasi_1: Total kumulatif vaksin dosis 1 diberikan perhari per target vaksinasi
- persentasi_vaksinasi_2: Total kumulatif vaksin dosis 2 diberikan perhari per target vaksinasi
- harian_vaksinasi_1: Total vaksin dosis 1 yang diberikan perhari
- harian_vaksinasi_2: Total vaksin dosis 2 yang diberikan perhari

Sumber data:
https://tiny.cc/Datacovidjakarta (akses: 8 Oktober 2021)
"""

# Import data vaksinasi golongan
url = "https://raw.githubusercontent.com/rasendriyam/datavaksin/main/vaksin_golongan.csv"
df_gol = pd.read_csv(url)
df_gol.info()

df_gol['date'] = df_gol['date'].astype('datetime64[s]')

#manambahkan kolom waktu
df_gol["hari"] = df_gol["date"].dt.weekday
df_gol["bulan"] = np.uint8(df_gol["date"].dt.month)
bulan_ = {1:"01Januari", 2:"02Februari", 3:"03Maret", 4:"04April", 5:"05May", 6:"06Juni", 7:"07Juli", 8:"08Agustus",9:"09September",10:"10Oktober",11:"11November",12:"12Desember"}
df_gol['bulan'] = [bulan_[i] for i in df_gol['bulan']]

#mengubah bentuk variabel ke tipe yang sesuai
df_gol['golongan'] = df_gol['golongan'].astype('category')
df_gol['hari'] = df_gol['hari'].astype('category') 
df_gol['bulan'] = df_gol['bulan'].astype('category')
df_gol.info()

df_gol.tail()

df_gol.head()

df_gol.isna().sum()

df_gol.describe().transpose()

print(df_gol.shape)

df_gol.duplicated().sum()

df_gol['golongan'].value_counts()

df_gol_akhir = df_gol.loc[df_gol['date'] == '2021-10-08'].reset_index()
plt.figure(figsize = (9,4))
p  = sns.barplot(x = "golongan", y = "vaksinasi_2",data=df_gol_akhir)
for item in p.get_xticklabels():
    item.set_rotation(45)

df_gol_awal = df_gol.loc[df_gol['date'] == '2021-03-05'].reset_index()
plt.figure(figsize = (9,4))
p  = sns.barplot(x = "golongan", y = "vaksinasi_2",data=df_gol_awal)
for item in p.get_xticklabels():
    item.set_rotation(45)

df_gol2=df_gol.loc[df_gol['date']!='2021-03-05']
p= sns.catplot(x="bulan", y="harian_vaksinasi_2",hue="golongan", kind="swarm", data=df_gol2)

"""#Data vaksin kecamatan

Variabel pada data vaksin kecamatan
- kecamatan: Kecamatan yang ada di DKI Jakarta
- wilayah_kota: Kabupaten dan kota di wilayah DKI Jakarta
- target_perkecamatan: Sasaran vaksinasi yang telah ditentukan perkecamatan  perkecamatan
- date: Tanggal (5 Maret - 8 Oktober 2021)
- Cakupan Suntik 1: Total kumulatif vaksin dosis 1 diberikan perhari
- Cakupan Suntik 2: Total kumulatif vaksin dosis 2 diberikan perhari
- target_vaksinasi: sasaran vaksin yang telah ditentukan pergolongan 

Sumber data:
https://tiny.cc/Datacovidjakarta (akses: 8 Oktober 2021)
"""

# Import data vaksinasi kecamatan
url = "https://raw.githubusercontent.com/rasendriyam/datavaksin/main/vaksin_kecamatan.csv"
df_kec = pd.read_csv(url)
df_kec

df_kec['date'] = df_kec['date'].astype('datetime64[s]')

#manambahkan kolom waktu
df_kec["hari"] = df_kec["date"].dt.weekday
df_kec["bulan"] = np.uint8(df_kec["date"].dt.month)

#mengubah bentuk variabel ke tipe yang sesuai
df_kec['kecamatan'] = df_kec['kecamatan'].astype('category')
df_kec['wilayah_kota'] = df_kec['wilayah_kota'].astype('category')
df_kec['Keterangan'] = df_kec['Keterangan'].astype('category')
df_kec['Cakupan Suntik 2'] = df_kec['Cakupan Suntik 2'].astype(int)
df_kec['hari'] = df_kec['hari'].astype('category') 
df_kec['bulan'] = df_kec['bulan'].astype('category')
df_kec.info()

#mendefinisikan encoding menjadi nama bulan
bulan_ = {1:"01.Januari", 2:"02.Februari", 3:"03.Maret", 4:"04.April", 5:"05.May", 6:"06.Juni", 7:"07.Juli", 8:"08.Agustus",9:"09.September",10:"10.Oktober",11:"11.November",12:"12.Desember"}
df_kec['bulan'] = [bulan_[i] for i in df_kec['bulan']]

df_kec.head()

df_kec.tail()

df_kec.isna().sum()

print(df_kec.shape)

df_kec.duplicated().sum()

df_kec.describe().transpose()

plt.figure(figsize=(8, 8))
p = sns.barplot(y='kecamatan', x= 'Cakupan Suntik 2', data=df_kec)
plt.show()

plt.figure(figsize=(11, 6))
p = sns.barplot(y='Cakupan Suntik 2', x= 'wilayah_kota', data=df_kec)
plt.show()

p= sns.catplot(x="bulan", y="Cakupan Suntik 2",hue="wilayah_kota", kind="swarm", data=df_kec)
sns.set(rc={'figure.figsize':(20,10)})

plt.figure(figsize=(8, 6))
p = sns.barplot(y='bulan', x= 'Cakupan Suntik 2', data=df_kec)
plt.show()

#weighted = vaksin dosis 2 per wlayah kota / target vaksinasi per wilayah kota
df_kec2 = df_kec.groupby(['wilayah_kota',"date"]).agg('sum').reset_index()
df_kec2t = df_kec2[['wilayah_kota','target_perkecamatan','date']]

df_kec3 = df_kec.groupby(['wilayah_kota']).agg('sum').reset_index()
df_kec3 = df_kec3[['wilayah_kota','Cakupan Suntik 2']]

df_kec_target= pd.merge(df_kec2,df_kec3,how = 'left', left_on=['wilayah_kota'],right_on=['wilayah_kota'])
df_kec_target = df_kec_target.loc[df_kec_target['date']=='2021-08-10']

df_kec_target2= pd.merge(df_kec_target,df_hip,how = 'left', left_on=['wilayah_kota'],right_on=['wilayah_kota'])
df_kec_target2["weighted_vaksin2"] = (df_kec_target2["Cakupan Suntik 2_y"]/df_kec_target2["target_perkecamatan"])
df_kec_target2 = df_kec_target2[['wilayah_kota','target_perkecamatan','Cakupan Suntik 2_y','weighted_vaksin2','jumlah_titik_vaksin']]
df_kec_target2

plt.figure(figsize=(8, 6))
p = sns.barplot(y='wilayah_kota', x= 'weighted_vaksin2', data=df_kec_target2)
plt.show()

plt.figure(figsize=(8, 6))
p = sns.barplot(y='wilayah_kota', x= 'jumlah_titik_vaksin', data=df_kec_target2)
plt.show()

"""#Forecasting Vaksinasi Dosis 2 - ARIMA"""

# Import data vaksinasi golongan
#url = "https://raw.githubusercontent.com/rasendriyam/datavaksin/main/vaksin_golongan.csv"
df_fc = pd.read_excel('/content/data_forecast.xlsx')
df_fc['Tanggal'] = df_fc['Tanggal'].astype('datetime64[s]')
df_fc.info()

#mengambil variable tanggal dan vaksinasi_2 sebagai data untuk forecast
df_fc = df_gol.groupby(["date"]).agg('sum').reset_index()
df_fc = df_fc[["date","vaksinasi 2"]]
df_fc.info()

#mengubah variable tanggal sebagai index
df_fc = df_fc.set_index('Tanggal')
df_fc

p = d = q = range(0, 2)
pdq = list(itertools.product(p, d, q))
seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]
print('Examples of parameter combinations for Seasonal ARIMA...')
print('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))
print('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))
print('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))
print('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))

# Parameter Selection
for param in pdq:
     for param_seasonal in seasonal_pdq:
         try:
             mod = sm.tsa.statespace.SARIMAX(df_fc,
                                             order=param,
                                             seasonal_order=param_seasonal,
                                             enforce_stationarity=False,
                                             enforce_invertibility=False)
             results = mod.fit()
             print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))
         except:
             continue
#best model ARIMA: ARIMA (1,1,1)

mod = sm.tsa.statespace.SARIMAX(df_fc,
                                order=(1, 1, 1),
                                enforce_stationarity=False,
                                enforce_invertibility=False)
results = mod.fit()
print(results.summary().tables[1])

results.plot_diagnostics(figsize=(16, 8))
plt.show()

pred = results.get_prediction(start=pd.to_datetime('2021-03-05'), dynamic=False)
pred_ci = pred.conf_int()
ax = df_fc.plot(label='observed')
pred.predicted_mean.plot(ax=ax, label='prediksi', alpha=.7, figsize=(14, 7))
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.2)
ax.set_xlabel('Date')
ax.set_ylabel('total kumulatif vaksin diberikan harian')
plt.legend()
plt.show()

y_forecasted = pred.predicted_mean
# print(y_forecasted)
# df_fc['vaksinasi_2']['2021-03-05':]
y_truth = df_fc['Vaksinasi 2']['2021-03-05':]
mse = ((y_forecasted - y_truth) ** 2).mean()
print('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))

print('The Root Mean Squared Error of our forecasts is {}'.format(round(np.sqrt(mse), 2)))

def mean_absolute_percentage_error(y_true, y_pred): 
    """Calculates MAPE given y_true and y_pred"""
    y_true, y_pred = np.array(y_true), np.array(y_pred)
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

mean_absolute_percentage_error(y_truth,y_forecasted)

pred_uc = results.get_forecast(steps=84)
pred_ci = pred_uc.conf_int()
ax = df_fc['Vaksinasi 2'].plot(label='Total Vaksin Dosis 2', figsize=(14, 7))
pred_uc.predicted_mean.plot(ax=ax, label='Forecast')
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.25)
ax.set_title('Vaksinasi Dosis 2')
ax.set_xlabel('Date')
ax.set_ylabel('Total Vaksin Diberikan')
plt.legend()
plt.show()

print(pred_ci)

pu = pred_uc.predicted_mean
print(pu)

pu.to_excel('pu.xlsx')